jobs:
  - job: macOS_tests_github
    displayName: macOS Tests github
    dependsOn: macOS_build
    timeoutInMinutes: 180
    pool:
      vmImage: macos-10.15
    variables:
      ATOM_RESOURCE_PATH: $(Build.SourcesDirectory)
      CI: true
      MOCHA_TIMEOUT: 60000
      UNTIL_TIMEOUT: 30000
    steps:
      - template: ./preparation.yml

      - template: ./cache.yml
        parameters:
          OS: macos

      # The artifact caching task does not work on forks, so we need to
      # bootstrap again for pull requests coming from forked repositories.
      - template: ./bootstrap.yml

      - template: ./download-unzip.yml
        parameters:
          artifacts:
            - atom-mac.zip
            - atom-mac-symbols.zip

      - pwsh: |
          cd $(Build.SourcesDirectory)/node_modules/github
          echo "Moving node_modules to node_modules.bak"
          mv node_modules node_modules.bak
          echo "Installing test runner dependencies for the github package"
          $(Build.SourcesDirectory)/apm/node_modules/.bin/apm install
        displayName: Prepare test dependencies for package
        condition: and(succeeded(), ne(variables['Atom.SkipTests'], 'true'))

      - pwsh: |
          echo CI env var is set to: $env:CI
          echo MOCHA_TIMOUT env var is set to: $env:MOCHA_TIMEOUT
          echo UNTIL_TIMOUT env var is set to: $env:UNTIL_TIMEOUT
          $(Build.SourcesDirectory)/out/Atom*.app/Contents/MacOS/Atom* --resource-path $(Build.SourcesDirectory) --test $(Build.SourcesDirectory)/node_modules/github/test
        displayName: Run tests
        condition: and(succeeded(), ne(variables['Atom.SkipTests'], 'true'))
        env:
          CI: true
          MOCHA_TIMEOUT: 60000
          UNTIL_TIMEOUT: 30000

      - pwsh: |
          echo CI env var is set to: $env:CI
          echo MOCHA_TIMOUT env var is set to: $env:MOCHA_TIMEOUT
          echo UNTIL_TIMOUT env var is set to: $env:UNTIL_TIMEOUT
          $(Build.SourcesDirectory)/out/Atom*.app/Contents/MacOS/Atom* --resource-path $(Build.SourcesDirectory) --test $(Build.SourcesDirectory)/node_modules/github/test
        displayName: Run tests
        condition: ne(variables['Atom.SkipTests'], 'true')

      - pwsh: |
          cd $(Build.SourcesDirectory)/node_modules/github
          echo "Restoring node_modules from node_modules.bak"
          rm node_modules -recurse -force
          mv node_modules.bak node_modules
        displayName: Restore original dependencies for package
        condition: ne(variables['Atom.SkipTests'], 'true'))
