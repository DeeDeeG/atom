# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'echo Hello, world"'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- script: |
    echo 'vars: "$string" "$string2" "$string3"'
  displayName: 'single quotes around entire command and args, double quotes around "each" "arg"'
  env: { string: $(string), string3: variables.string3 }

- script: |
    echo vars: "$string" "$string2" "$string3"
  displayName: 'echo with double quotes around each var, pass in env block; string: $(string), string3: variables.string3'
  env: { string: $(string), string3: variables.string3 }

- script: |
    echo 'vars: $string $string2 $string3'
  displayName: 'echo with single quotes around entire echo command and args'
  env: { string: $(string), string3: variables.string3 }

- script: |
    echo vars: $string $string2 $string3
  displayName: 'no quotes; string: $(string), string3: variables.string3'
  env: { string: $(string), string3: variables.string3 }

- script: |
    echo Below is with no env
  displayName: 'Below is with no env'

- script: |
    echo 'vars: "$string" "$string2" "$string3"'
  displayName: 'single quotes around whole echo command and args; echoing $string, $string2 and $string3 without passing in env block'

- script: |
    echo 'vars: $string $string2 $string3'
  displayName: 'no env, single quotes around entire echo command and args'

- script: |
    echo vars: "$string" "$string2" "$string3"
  displayName: 'no env, double quoting each individual var; echo "$string" "$string2" "$string3"'

- script: |
    echo vars: $string $string2 $string3
  displayName: 'no env, no quote marks'

- script: |
    echo vars: SET: $SET, SET_SECRET: $SET_SECRET, notset: $notset
  displayName: 'no env; echo $SET, $SET_SECRET and $notset'

- script: |
    echo vars: SET: $SET, SET_SECRET: $SET_SECRET, notset: $notset
  displayName: 'passed using $(macro) syntax in the env block: $SET, $SET_SECRET and $notset'
  env: {SET: $(SET), SET_SECRET: $(SET_SECRET), notset: $(NOTSET) }

- script: |
    echo vars: SET: $SET, SET_SECRET: $SET_SECRET, notset: $notset
  displayName: 'passed using \$\{\{ template \}\} variable syntax in the env block: SET, SET_SECRET and notset'
  env: 
   SET: ${{ variables.SET }}
   SET_SECRET: ${{ variables.SET_SECRET }}
   notset: ${{ variables.NOTSET }}